Job identifier is 2287663.jobmgr1
Working directory is /home/jc475572/testscripts/angsdtest

bowtie2 v2.4.4 software is available in an apptainer.
To view the list of aliases (shorthand) available, use the command:
	module show bowtie2/2.4.4
If the command(s) you require are not available as an alias, you
can request one or more be added.

The apptainer you could be using is:
	/sw/containers/bowtie2-2.4.4.sif

If you want/need higher level control, see relevant man pages:
	man singularity-run
	man singularity-exec

Settings:
  Output files: "haliotis_gen.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  haliotis_genome.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
bmax according to bmaxDivN setting: 30450802
Using parameters --bmax 22838102 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 22838102 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:10
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.74005e+07 (target: 22838101)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (22838102) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 22771479 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:55
Returning block of 22771480 for bucket 1
Getting block 2 of 7
  Reserving size (22838102) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 17530354 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:42
Returning block of 17530355 for bucket 2
Getting block 3 of 7
  Reserving size (22838102) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 17564452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:42
Returning block of 17564453 for bucket 3
Getting block 4 of 7
  Reserving size (22838102) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 18263332 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:44
Returning block of 18263333 for bucket 4
Getting block 5 of 7
  Reserving size (22838102) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 19541363 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:47
Returning block of 19541364 for bucket 5
Getting block 6 of 7
  Reserving size (22838102) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 18049405 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 18049406 for bucket 6
Getting block 7 of 7
  Reserving size (22838102) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 8082817 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:20
Returning block of 8082818 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 35122117
fchr[G]: 61302371
fchr[T]: 89318600
fchr[$]: 121803208
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 51428321 bytes to primary EBWT file: haliotis_gen.1.bt2
Wrote 30450808 bytes to secondary EBWT file: haliotis_gen.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 121803208
    bwtLen: 121803209
    sz: 30450802
    bwtSz: 30450803
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 7612701
    offsSz: 30450804
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 634392
    numLines: 634392
    ebwtTotLen: 40601088
    ebwtTotSz: 40601088
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:05:58
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 30450802
Using parameters --bmax 22838102 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 22838102 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:10
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.35337e+07 (target: 22838101)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (22838102) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 6192066 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:15
Returning block of 6192067 for bucket 1
Getting block 2 of 9
  Reserving size (22838102) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 20110618 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:48
Returning block of 20110619 for bucket 2
Getting block 3 of 9
  Reserving size (22838102) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 9734200 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:24
Returning block of 9734201 for bucket 3
Getting block 4 of 9
  Reserving size (22838102) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 16068834 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:40
Returning block of 16068835 for bucket 4
Getting block 5 of 9
  Reserving size (22838102) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 8187706 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:20
Returning block of 8187707 for bucket 5
Getting block 6 of 9
  Reserving size (22838102) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 15755413 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:38
Returning block of 15755414 for bucket 6
Getting block 7 of 9
  Reserving size (22838102) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 17175964 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:43
Returning block of 17175965 for bucket 7
Getting block 8 of 9
  Reserving size (22838102) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 10316629 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:25
Returning block of 10316630 for bucket 8
Getting block 9 of 9
  Reserving size (22838102) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 18261770 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:48
Returning block of 18261771 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 35122117
fchr[G]: 61302371
fchr[T]: 89318600
fchr[$]: 121803208
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 51428321 bytes to primary EBWT file: haliotis_gen.rev.1.bt2
Wrote 30450808 bytes to secondary EBWT file: haliotis_gen.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 121803208
    bwtLen: 121803209
    sz: 30450802
    bwtSz: 30450803
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 7612701
    offsSz: 30450804
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 634392
    numLines: 634392
    ebwtTotLen: 40601088
    ebwtTotSz: 40601088
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:06:09
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
	LANGUAGE = (unset),
	LC_ALL = (unset),
	LANG = "en_US.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
(ERR): "hailotis_gen" does not exist or is not a Bowtie 2 index
Exiting now ...
